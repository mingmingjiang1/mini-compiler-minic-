tokens stream:  [
  [ 1, 6, 'int' ],     [ 1, 3, 'main' ],   [ 1, '(', '(' ],
  [ 1, ')', ')' ],     [ 1, '{', '{' ],    [ 2, 3, 'print' ],
  [ 2, '(', '(' ],     [ 2, 3, 'add' ],    [ 2, '(', '(' ],
  [ 2, 3, 'add' ],     [ 2, '(', '(' ],    [ 2, 3, 'total' ],
  [ 2, '(', '(' ],     [ 2, 4, '10' ],     [ 2, ')', ')' ],
  [ 2, ',', ',' ],     [ 2, 4, '3' ],      [ 2, ')', ')' ],
  [ 2, ',', ',' ],     [ 2, 3, 'add' ],    [ 2, '(', '(' ],
  [ 2, 3, 'total' ],   [ 2, '(', '(' ],    [ 2, 4, '10' ],
  [ 2, ')', ')' ],     [ 2, ',', ',' ],    [ 2, 4, '3' ],
  [ 2, ')', ')' ],     [ 2, ')', ')' ],    [ 2, ')', ')' ],
  [ 2, ';', ';' ],     [ 3, 5, 'return' ], [ 3, 4, '0' ],
  [ 3, ';', ';' ],     [ 4, '}', '}' ],    [ 7, 6, 'int' ],
  [ 7, 3, 'add' ],     [ 7, '(', '(' ],    [ 7, 6, 'int' ],
  [ 7, 3, 'x' ],       [ 7, ',', ',' ],    [ 7, 6, 'int' ],
  [ 7, 3, 'y' ],       [ 7, ')', ')' ],    [ 7, '{', '{' ],
  [ 8, 5, 'return' ],  [ 8, 3, 'x' ],      [ 8, '+', '+' ],
  [ 8, 3, 'y' ],       [ 8, ';', ';' ],    [ 9, '}', '}' ],
  [ 11, 6, 'int' ],    [ 11, 3, 'total' ], [ 11, '(', '(' ],
  [ 11, 6, 'int' ],    [ 11, 3, 'x' ],     [ 11, ')', ')' ],
  [ 11, '{', '{' ],    [ 12, 1, 'if' ],    [ 12, '(', '(' ],
  [ 12, 3, 'x' ],      [ 12, 8, '==' ],    [ 12, 4, '0' ],
  [ 12, ')', ')' ],    [ 12, '{', '{' ],   [ 13, 5, 'return' ],
  [ 13, 3, 'x' ],      [ 13, ';', ';' ],   [ 14, '}', '}' ],
  [ 14, 2, 'else' ],   [ 14, '{', '{' ],   [ 15, 6, 'int' ],
  [ 15, 3, 'm' ],      [ 15, 7, '=' ],     [ 15, 3, 'total' ],
  [ 15, '(', '(' ],    [ 15, 3, 'x' ],     [ 15, '-', '-' ],
  [ 15, 4, '1' ],      [ 15, ')', ')' ],   [ 15, ';', ';' ],
  [ 16, 5, 'return' ], [ 16, 3, 'x' ],     [ 16, '+', '+' ],
  [ 16, 3, 'm' ],      [ 16, ';', ';' ],   [ 17, '}', '}' ],
  [ 18, '}', '}' ]
]
first set:  {
  E: Set(1) { '6' },
  Program: Set(1) { '6' },
  Function: Set(1) { '6' },
  Formals: Set(1) { '6' },
  Expression: Set(5) { '3', '6', '18', '4', '5' },
  Return: Set(1) { '5' },
  Assign: Set(1) { '6' },
  Arigthm: Set(3) { '18', '3', '4' },
  Factor: Set(3) { '18', '3', '4' },
  Condition: Set(5) { '3', '6', '18', '4', '5' },
  Caller: Set(1) { '3' },
  Params: Set(5) { '3', '6', '18', '4', '5' },
  Statement: Set(6) { '1', '3', '6', '18', '4', '5' },
  Blocks: Set(1) { '{' },
  Branch: Set(1) { '1' },
  Statements: Set(6) { '1', '3', '6', '18', '4', '5' },
  Token: Set(3) { '18', '3', '4' }
}
follow set:  {
  E: Set(1) { '$' },
  Program: Set(2) { '$', '6' },
  Function: Set(2) { '$', '6' },
  Formals: Set(2) { ')', ',' },
  Expression: Set(4) { '8', ';', ')', ',' },
  Return: Set(4) { '8', ';', ')', ',' },
  Assign: Set(4) { '8', ';', ')', ',' },
  Arigthm: Set(6) { '8', ';', '+', '-', ')', ',' },
  Factor: Set(8) { '8', ';', '+', '-', '*', '/', ')', ',' },
  Condition: Set(4) { '8', ';', ')', ',' },
  Caller: Set(4) { '8', ';', ')', ',' },
  Params: Set(2) { ')', ',' },
  Statement: Set(7) { '}', '1', '3', '6', '18', '4', '5' },
  Blocks: Set(9) { '$', '6', '2', '}', '1', '3', '18', '4', '5' },
  Branch: Set(7) { '}', '1', '3', '6', '18', '4', '5' },
  Statements: Set(7) { '}', '1', '3', '6', '18', '4', '5' },
  Token: Set(8) { '8', ';', '+', '-', '*', '/', ')', ',' }
}
[32m[1mÊñáÊ≥ïËß£ÊûêÊàêÂäü(sematic bingo!!!!)ÔºåÁîüÊàêÁöÑastÂ¶Ç‰∏ãÔºö[22m[39m
Program_Class {
  expr: Function_Class {
    formal_list: [],
    name: 'main',
    expressions: Caller_Class {
      params_list: [ undefined ],
      id: 'print',
      params: Caller_Class {
        params_list: [ undefined, undefined ],
        id: 'add',
        params: Caller_Class {
          params_list: [ '3', undefined ],
          id: 'add',
          params: Caller_Class {
            params_list: [ '10' ],
            id: 'total',
            params: Int_Contant_Class { token: '10' },
            next: Int_Contant_Class { token: '3' }
          },
          next: Caller_Class {
            params_list: [ '3', undefined ],
            id: 'add',
            params: Caller_Class {
              params_list: [ '10' ],
              id: 'total',
              params: Int_Contant_Class { token: '10' },
              next: Int_Contant_Class { token: '3' }
            },
            next: undefined
          }
        },
        next: undefined
      },
      next: Return_Class { expr: Int_Contant_Class { token: '0' } }
    },
    formals: undefined,
    next: Function_Class {
      formal_list: [ { type: 'int', id: 'x' }, { type: 'int', id: 'y' } ],
      name: 'add',
      expressions: Return_Class {
        expr: Add_Class {
          lvalue: Indentifier_Class { token: 'x' },
          rvalue: Indentifier_Class { token: 'y' }
        }
      },
      formals: Formal_Class {
        name: 'y',
        type: 'int',
        next: Formal_Class { name: 'x', type: 'int', next: undefined }
      },
      next: Function_Class {
        formal_list: [ { type: 'int', id: 'x' } ],
        name: 'total',
        expressions: Branch_Class {
          ifCond: Cond_Class {
            lExpr: Indentifier_Class { token: 'x' },
            rExpr: Int_Contant_Class { token: '0' },
            op: '=='
          },
          statementTrue: Return_Class { expr: Indentifier_Class { token: 'x' } },
          statementFalse: Assign_Class {
            name: 'm',
            ltype: 'int',
            r: Caller_Class {
              params_list: [ undefined ],
              id: 'total',
              params: Sub_Class {
                lvalue: Indentifier_Class { token: 'x' },
                rvalue: Int_Contant_Class { token: '1' }
              },
              next: undefined
            },
            next: Return_Class {
              expr: Add_Class {
                lvalue: Indentifier_Class { token: 'x' },
                rvalue: Indentifier_Class { token: 'm' }
              }
            }
          }
        },
        formals: Formal_Class { name: 'x', type: 'int', next: undefined },
        next: undefined,
        return_type: 'int'
      },
      return_type: 'int'
    },
    return_type: 'int'
  }
}
